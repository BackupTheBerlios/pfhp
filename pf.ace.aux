--PF_HP: brute force proteinfolding in the 2D HP Model.
--Copyright (C) 2009  Gerrit Leder

--This program is free software; you can redistribute it and/or
--modify it under the terms of the GNU General Public License
--as published by the Free Software Foundation; either version 2
--of the License, or (at your option) any later version.

--This program is distributed in the hope that it will be useful,
--but WITHOUT ANY WARRANTY; without even the implied warranty of
--MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--GNU General Public License for more details.

--You should have received a copy of the GNU General Public License
--along with this program; if not, write to the Free Software
--Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

--Gerrit Leder, Washingtonring 132, 71686 Remseck-Pattonville, GERMANY
--gerrit.leder@googlemail.com



-- This file is a template for building an ACE file for your own project.
-- Copy this file into your working directory (the directory used to
-- run the SmartEiffel compiler) and edit it.
system
   "pf_hp"
      -- Replace SYSTEM_NAME with the name of the executable file
      -- to be generated for your system. (This is the equivalent of
      -- the -o flag in traditional command line mode.)

root

   START: make
      -- Replace ROOT_CLASS and creation_procedure with the names of the
      -- root class and the root creation procedure for your system.

default -- section of the system

   precompiled("$ISE_EIFFEL/precomp/spec/$ISE_PLATFORM/EIFGENs/base")

   assertion (boost);
      -- The default level of assertion checking for the system.
      -- Choose the appropriate value: boost, no, require, ensure,
      -- invariant, loop, check, all.

   debug (no);
      -- The default debug level for the system.
      -- Choose yes, no, or any "key" you wish.

   trace (no);
      -- The default trace mode for the system. Choose yes or no.

--   collect (yes);
       -- Choose yes here to add garbage collector support to your system.
       -- Choose no here to indicate that you don't want the garbage collector
       -- to be included in your system; no is the equivalent of the -no_gc
       -- flag in traditional command line mode.


--   no_style_warning (no);
       -- My humble opinion is that you should always write no here.
       -- Yes is the equivalent of the -no_style_warning flag in traditional
       -- command line mode.

--   no_warning (no);
       -- My humble opinion is that you should always write no here.
       -- Yes is the equivalent of the -no_warning flag in traditional
       -- command line mode.

--   verbose (no);
       -- The equivalent of the -verbose flag. (Also note that the -verbose
       -- flag is still accepted in ACE file mode.)

--   manifest_string_trace (no);
       -- The equivalent of the -manifest_string_trace flag.

--   high_memory_compiler (no);	
       -- The equivalent of the -high_memory_compiler flag.

cluster -- section

   -- The cluster section is an ordered list of clusters. Roughly speaking,
   -- a cluster can be considered as a directory where Eiffel source files
   -- are to be searched for. Thus, the order of this list of clusters is
   -- important because clusters are considered sequentially while
   -- searching for an Eiffel source file. Each cluster is described
   -- as follows:

   local: "."

      default -- at this cluster level
         assertion (boost)
         debug (no);
         trace (no);
      end

--        "${path_lib}/loadpath.se"



--      option -- for this cluster
--         assertion (loop) : CLASS_NAME1, CLASS_NAME2;
--         assertion (all)  : CLASS_NAME3, CLASS_NAME4;
         -- ...
--         debug (yes) : CLASS_NAME1, CLASS_NAME2, ...;
--         debug ("KEY") : CLASS_NAME1, CLASS_NAME2, ...;
         -- ...
--         trace : CLASS_NAME1, CLASS_NAME2;
--         trace : CLASS_NAME3, CLASS_NAME4;
         -- ...
      end -- of one cluster

end
